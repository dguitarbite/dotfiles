" My .vimrc -- dguitarbite (dguitarbite@gmail.com)
" github.com/dguitarbite/dguitarbite
" Note to myself:
" Use vim or die
"

" Vundle

    " Pre-Configuration
        set nocompatible              " Switch off vi backwards compatability
        filetype off                  " I wanna use Vundle

    " set the runtime path to include Vundle and initialize
        if has('unix')
            set rtp+=$HOME/.vim/bundle/Vundle.vim
        elseif has('win32')
            set rtp+=$VIMRUNTIME/.vim/bundle/Vundle.vim
        endif

    " Install Vim Plugins
        call vundle#begin()         " Start Vundle Plugin Configuration

            " Reviewed
            Plugin 'gmarik/Vundle.vim'
            Plugin 'vim-airline/vim-airline'
            Plugin 'Valloric/YouCompleteMe'
            Plugin 'christoomey/vim-tmux-navigator'
            Plugin 'vim-syntastic/syntastic'

            " To be reviewed.
            "Plugin 'cscope'
            Plugin 'tpope/vim-fugitive'
            Plugin 'xolox/vim-easytags'
            Plugin 'jmcantrell/vim-virtualenv'
            Plugin 'chrisbra/NrrwRgn'
            Plugin 'tomtom/tlib_vim'
            Plugin 'Shougo/neocomplete'
            Plugin 'vim-airline/vim-airline-themes'
            Plugin 'kien/ctrlp.vim'
            Plugin 'TimeTap'
            Plugin 'StripWhiteSpaces'
            Plugin 'reinh/vim-makegreen'
            Plugin 'closetag.vim'
            Plugin 'Gundo'
            Plugin 'tagbar'
            Plugin 'scratch'
            Plugin 'vim-misc'
            Plugin 'rking/ag.vim'
            Plugin 'mileszs/ack.vim'
            Plugin 'shougo/unite.vim'
            Plugin 'jisaacks/GitGutter'
            Plugin 'scrooloose/nerdtree'
            Plugin 'myusuf3/numbers.vim'
            Plugin 'nvie/vim-togglemouse'
            Plugin 'davidhalter/jedi-vim'
            Plugin 'scrooloose/nerdcommenter'
            Plugin 'ggreer/the_silver_searcher'
            Plugin 'Shougo/neocomplcache.vim'
            Plugin 'easymotion/vim-easymotion'
            Plugin 'terryma/vim-multiple-cursors'
            Plugin 'altercation/vim-colors-solarized'
            Plugin 'Rykka/riv.vim'
            Plugin 'bash-support.vim'
            Plugin 'LucHermitte/lh-cpp'
            Plugin 'fholgado/minibufexpl.vim'
            Plugin 'airblade/vim-gitgutter.git'
            Plugin 'vim-scripts/TaskList.vim'
            Plugin 'MarcWeber/vim-addon-mw-utils'
            Plugin 'restore_view.vim'
            Plugin 'autofold.vim'
            Plugin 'Yggdroot/indentLine'
        call vundle#end()            " End Vundle Plugin Configuration

    " Post-Configuration
        filetype on
        filetype plugin indent on

" General Configuration

    " Color Scheme!
        syntax enable
	    try
            colorscheme solarized
            set background=dark
        catch
            colorscheme default
        endtry

    " Autoreload .vimrc
        autocmd! bufwritepost .vimrc source %

    " detect encoding
        set fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1


    " Tagbar toggle
        nmap <F8> :TagbarToggle<CR>

    " Task Lists
        nmap <F9> :TaskList<CR>

    " Misc
        set timeoutlen=50
        set laststatus=2
        set showtabline=2
        set showmatch
        set backspace=indent,eol,start
        set noshowmode
        set showcmd
        set wildmenu
        set lazyredraw
        set encoding=utf-8
        set fillchars+=stl:\ ,stlnc:\
        set spell
        set cursorline
        set foldlevelstart=10
        set foldlevel=5

    " Undo My Life
        set history=1000
        set undolevels=700

    " Disable backup and swap files
        set nobackup
        set nowritebackup
        set noswapfile

    " Formatting
        set nowrap              " Do not wrap long lines
        set autoindent          " Indent at the same level as previous line
        set expandtab           " Tabs are spaces not tabs
        set tabstop=4           " Indent every four columns
        set softtabstop=4       " Backspace deletes tabs
        set shiftwidth=4        " Shift by 4 spaces '>>/<<'
        set splitright          " Vsplit to right
        set splitbelow          " split to below
        set pastetoggle=<F5>    " Toggle paste mode

    " Searching ...
        set incsearch
        set hlsearch
        set ignorecase
        set smartcase
        set gdefault
        set incsearch
        set showmatch

    " Buffers and splits ...
        set diffopt+=vertical

    " Disable arrow keys!
        nnoremap <up> <nop>
        nnoremap <down> <nop>
        nnoremap <left> <nop>
        nnoremap <right> <nop>
        inoremap <up> <nop>
        inoremap <down> <nop>
        inoremap <left> <nop>
        inoremap <right> <nop>
        nnoremap j gj
        nnoremap k gk

    " Settings for ctrlp
        let g:ctrlp_max_height = 30
        set wildignore+=*.pyc
        set wildignore+=*_build/*
        set wildignore+=*/coverage/*

    " Enable and Disable Mouse
        set mouse=a     " Automatically Enable mouse usage
        set mousehide   " Hide the mouse cursor while typing

    " Status Line
        " Left alignment
        set statusline+=%n:             " - buffer number, followed by a colon
        set statusline+=%<%f            " - relative filename, truncated from the left
        set statusline+=\               " - a space
        set statusline+=%w
        set statusline+=%h              " - [Help] if this is a help buffer
        set statusline+=%m              " - [+] if modified, [-] if not modifiable
        set statusline+=%r              " - [RO] if readonly
        set statusline+=\               " - a space
        set statusline+=%{fugitive#statusline()} " Add Vim Fugutive in the status line
        set statusline+=\               " - a space

        " Right alignment
        set statusline+=%=              " - right-align the rest
        set statusline+=$#warningmsg#   " Syntastic warning
        set statusline+=%{SyntasticStatuslineFlag()}
        set statusline+=%*
        set statusline+=\               " - a space
        set statusline+=%-10.(%l,%c%V%) " - line,column[-virtual column]
        set statusline+=\               " - a space
        set statusline+=%4L             " - total number of lines in buffer
        set statusline+=\               " - a space
        set statusline+=%P              " - position in buffer as percentage

    " Syntastic

        " Toggle syntastic checks. Could be really irritating at times.
		nmap <F7> :SyntasticToggleMode<CR>

        " Programming languages.
        let g:syntastic_python_checkers = ['pylint', 'pydocstyle']
        let g:syntastic_sh_checkers = ['bashate', 'checkbashisms', 'sh', 'shellcheck']
        let g:syntastic_go_checkers = ['gofmt', 'golint', 'gotype', 'govet']
        let g:syntastic_zsh_checkers = ['zsh']

        " Configuration files.
        let g:syntastic_haml_checkers = ['haml', 'haml_lint']
        let g:syntastic_json_checkers = ['jsonlint', 'jsonval']
        let g:syntastic_markdown_checkers = ['mdl', 'proselint', 'textlint']
        let g:syntastic_rst_checkers = ['proselint', 'rst2pseudoxml', 'rstcheck', 'sphinx']
        let g:syntastic_yaml_checkers = ['yamllint', 'yamlxs']

        let g:syntastic_aggregate_errors = 1
        let g:syntastic_always_populate_loc_list = 1
        let g:syntastic_auto_loc_list = 1
        let g:syntastic_check_on_open = 0
        let g:syntastic_check_on_wq = 1

    " Git gutter
        let g:gitgutter_realtime = 0    " Disable realtime checks to reduce
        let g:gitgutter_eager = 0
        let g:gitgutter_escape_grep = 1
        let g:gitgutter_enabled = 1
        let g:gitgutter_signs = 1
        let g:gitgutter_highlight_lines = 1

    " Remapping/Custom mapping Keys
        " The leader key!
            let mapleader=','
            set timeoutlen=1500     " Default timeout is too short.

        " Gitgutter toggle
            noremap <leader>gg :GitGutterToggle<CR>
            noremap <leader>GG :GitGutterLineHighlightsToggle<CR>

        " Misc
            map Y y$
            nnoremap B ^ " Move to begining of a line
            nnoremap E $ " Move to end of a line
            map <F2> :NERDTreeToggle<CR>
            nnoremap <leader><space> :nohlsearch<CR>

        " Quit, Save ... command
            noremap <Leader>e :quit<CR>  " Quit current window
            noremap <Leader>E :qa!<CR>   " Quit all windows
            noremap <Leader>w :w<CR>     " Quick Save

        " Code folding options
            nmap <leader>f0 :set foldlevel=0<CR>
            nmap <leader>f1 :set foldlevel=1<CR>
            nmap <leader>f2 :set foldlevel=2<CR>
            nmap <leader>f3 :set foldlevel=3<CR>
            nmap <leader>f4 :set foldlevel=4<CR>
            nmap <leader>f5 :set foldlevel=5<CR>
            nmap <leader>f6 :set foldlevel=6<CR>
            nmap <leader>f7 :set foldlevel=7<CR>
            nmap <leader>f8 :set foldlevel=8<CR>
            nmap <leader>f9 :set foldlevel=9<CR>
            nnoremap <space> za " Space to open/close folds

        " Find merge conflict markers
            map <leader>fc /\v^[<\|=>]{7}( .*\|$)<CR>

        " Visual shifting (does not exit Visual mode)
            vnoremap < <gv
            vnoremap > >gv

        " Write in SUDO mode
            cmap w!! w !sudo tee % >/dev/null


    " Airline Customization
        let g:airline#extensions#tabline#enabled = 1
        let g:airline#extensions#tabline#left_sep = ' '
        let g:airline#extensions#tabline#left_alt_sep = '|'

        let g:airline_powerline_fonts = 1
        if !exists('g:airline_symbols')
            let g:airline_symbols = {}
        endif

        let g:airline_theme='luna' " Set theme
        let g:airline#extensions#tabline#enabled = 1	" Enable for tabview
        let g:airline#extensions#tabline#left_sep = ' '
        let g:airline#extensions#tabline#left_alt_sep = ''


    " Number Magik
    " Ignore some numbers
        let g:numbers_exclude = ['tagbar', 'gundo', 'minibufexpl', 'nerdtree']

    " Set number mode keymapbindings
        set number
        nnoremap <F3> :NumbersToggle<CR>
        nnoremap <F4> :set nu!<CR>

    " Gundo toggle
        nnoremap <F6> :GundoToggle<CR>

    " Ctags

        set tags=./tags;/,~/.vimtags

        " Make tags placed in .git/tags file available in all levels of a repository
        let gitroot = substitute(system('git rev-parse --show-toplevel'), '[\n\r]', '', 'g')
        if gitroot != ''
            let &tags = &tags . ',' . gitroot . '/.git/tags'
        endif

    " Fugitive
        " Make Gdiff vertical
        set diffopt+=vertical
        nnoremap <silent> <leader>gs :Gstatus<CR>
        nnoremap <silent> <leader>gd :Gdiff<CR>
        nnoremap <silent> <leader>gc :Gcommit<CR>
        nnoremap <silent> <leader>gb :Gblame<CR>
        nnoremap <silent> <leader>gl :Glog<CR>
        nnoremap <silent> <leader>gp :Git push<CR>
        nnoremap <silent> <leader>gr :Gread<CR>
        nnoremap <silent> <leader>gw :Gwrite<CR>
        nnoremap <silent> <leader>ge :Gedit<CR>
        nnoremap <silent> <leader>gi :Git add -p %<CR>
